# {{ project_name }}

A RAG (Retrieval Augmented Generation) application built with ragbits.
You can read more about ragbits [here](https://ragbits.deepsense.ai).

## Getting Started

1. Install dependencies:
```bash
uv sync
```

2. Run docker compose:
```bash
docker compose -f docker/docker-compose.yml up -d
```

3. Run the ingestion script:
```bash
uv run src/{{pkg_name}}/ingest.py
```

4. Run the main script:
```bash
uv run src/{{pkg_name}}/main.py
```

{%- if ui_type == "default" %}
## UI Access

The application includes a hosted UI that will be available at:
- **Ragbits UI**: http://localhost:8000

The UI will be automatically served when you run the main script.
{%- endif %}

{%- if has_ui %}
## UI Development

This project includes a UI component located in the `{{ ui_project_name if ui_type == "create" else "ui" }}/` directory.

### Getting Started

1. Navigate to the UI directory:
   ```bash
   cd {{ ui_project_name if ui_type == "create" else "ui" }}
   ```

2. Install dependencies:
   ```bash
   npm install
   ```

3. Start the development server:
   ```bash
   npm run dev
   ```

The UI will be available at http://localhost:3000

### Building for Production

```bash
npm run build
```

{%- if ui_type == "copy" %}
### Framework Details

This UI is a copy of the official Ragbits UI with the following features:
- React-based interface
- Full integration with Ragbits API
- Pre-configured components and styling
- Ready-to-use chat interface
{%- endif %}

{%- if ui_type == "create" and framework == "vanilla" %}
### Framework Details

This is a Vanilla TypeScript UI project with:
- Basic Vite setup
- TypeScript configuration
- @ragbits/api-client integration
- Minimal starter template
{%- endif %}

{%- if ui_type == "create" and framework == "react" %}
### Framework Details

This is a React UI project with:
- React 18 with TypeScript
- Vite build system
- @ragbits/api-client-react integration
- Basic component structure
{%- endif %}
{%- endif %}

{%- if observability %}

## Observability

This project includes a complete observability stack with:
- **OpenTelemetry Collector**: Collects traces and metrics
- **Prometheus**: Stores and queries metrics
- **Tempo**: Stores and queries distributed traces
- **Grafana**: Visualizes traces and metrics with pre-configured dashboards

### Accessing the Observability Stack

- **Grafana Dashboard**: http://localhost:3000 (admin/admin)
- **Prometheus**: http://localhost:9090
- **Tempo**: http://localhost:3200
- **OpenTelemetry Collector**: http://localhost:4317 (gRPC), http://localhost:4318 (HTTP)

The Grafana dashboard includes panels for:
- Recent traces from your RAG application
- LLM input token rates
- Prompt throughput percentiles
- Token throughput rates
- Time to first token metrics

### Configuration

Observability settings can be configured in your `.env` file:
```bash
# Observability configuration
OTEL_EXPORTER_ENDPOINT=http://localhost:4317
SERVICE_NAME={{project_name}}
ENABLE_TRACING=true
ENABLE_METRICS=true
```
{%- endif %}
