name: Publish create-ragbits-app to PyPI

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (auto-increments version)'
        required: false
        type: choice
        default: 'none'
        options:
          - 'none'
          - 'patch'
          - 'minor'
          - 'major'
      manual_version:
        description: 'Manual version (overrides release_type if set, e.g., 0.0.12)'
        required: false
        type: string
      create_github_release:
        description: 'Create GitHub release'
        required: false
        type: boolean
        default: true
      dry_run:
        description: 'Dry run (build only, do not publish)'
        required: false
        type: boolean
        default: false

jobs:
  publish-pypi:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: '0.6.9'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Determine version
        id: version
        run: |
          if [ -n "${{ inputs.manual_version }}" ]; then
            NEW_VERSION="${{ inputs.manual_version }}"
            echo "Using manual version: $NEW_VERSION"
          elif [ "${{ inputs.release_type }}" != "none" ]; then
            CURRENT_VERSION=$(grep 'version = ' pyproject.toml | cut -d '"' -f2)
            echo "Current version: $CURRENT_VERSION"

            # Parse version components
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}

            # Increment based on release type
            case "${{ inputs.release_type }}" in
              "major")
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              "minor")
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              "patch")
                PATCH=$((PATCH + 1))
                ;;
            esac

            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "Auto-incremented version (${{ inputs.release_type }}): $NEW_VERSION"
          else
            echo "Error: Either manual_version or release_type must be specified"
            exit 1
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in pyproject.toml
        run: |
          sed -i 's/version = "[^"]*"/version = "${{ steps.version.outputs.new_version }}"/' pyproject.toml
          echo "Updated version to ${{ steps.version.outputs.new_version }}"
          grep "version = " pyproject.toml

      - name: Build package
        run: |
          uv build --out-dir dist

      - name: Verify build
        run: |
          ls -la dist/
          echo "Package built successfully"

      - name: Publish to PyPI
        if: ${{ inputs.dry_run != true }}
        run: |
          uv tool run twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Dry run summary
        if: ${{ inputs.dry_run == true }}
        run: |
          echo "üîç DRY RUN MODE - Package built but not published"
          echo "Version: ${{ steps.version.outputs.new_version }}"
          echo "Built packages:"
          ls -la dist/
          echo ""
          echo "To publish for real, run the workflow again with dry_run=false"

      - name: Create git tag
        if: ${{ inputs.dry_run != true }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin "v${{ steps.version.outputs.new_version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release
        if: ${{ inputs.dry_run != true && inputs.create_github_release == true }}
        run: |
          gh release create "v${{ steps.version.outputs.new_version }}" \
            --title "v${{ steps.version.outputs.new_version }}" \
            --notes "Release v${{ steps.version.outputs.new_version }} of create-ragbits-app" \
            --latest \
            dist/*
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
